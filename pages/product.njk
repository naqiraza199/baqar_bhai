<!-- index.nunjucks -->
{% extends "layout.njk" %}
      	  <script>
		  $.getJSON("/assets/data/products.json", function (data) {

                console.log('json data',data);
                localStorage.setItem('products',JSON.stringify(data))
                //$.each(data, function (key, val) {
                //    items.push(data)
                //});

                //console.log(items)
                //products = items[0].products;
                //console.log(products)
            });
		  </script>
{% block content %}

    <div class="bg-light py-3">
      <div class="container">
        <div class="row">
          <div class="col-md-12 mb-0"><a href="index.html" style="color:#fff">Home</a> <span class="mx-2 mb-0">/</span> <strong class="text-white">Shop</strong></div>
        </div>
      </div>
    </div>

    <div class="site-section">
      <div class="container">
      
        <div class="row">
          <div class="col-md-6">
            <img class="img-fluid" id="item_image" src="assets/images/notfound.png" alt=""/>
          </div>
          <div class="col-md-6">
            <h2 class="text-black" id="item_title"></h2>
            <h4 id="item_color"></h4>
            <p>Size: <span id="item_size"></span></p>
            <p><span id="item_id"></span> (<span id="item_category"></span>)</p>
            <span id="item_color"></span>
            
            {# <p class="mb-4">Ex numquam veritatis debitis minima quo error quam eos dolorum quidem perferendis. Quos repellat dignissimos minus, eveniet nam voluptatibus molestias omnis reiciendis perspiciatis illum hic magni iste, velit aperiam quis.</p> #}
            <h5>Price</h5>
            <p><strong class="text-primary h4">$ <span id="item_price"></span> <span id="item_currency"></span></strong></p>

            {# <div class="mb-1 d-flex">
              <label for="option-sm" class="d-flex mr-3 mb-3">
                <span class="d-inline-block mr-2" style="top:-2px; position: relative;"><input type="radio" id="option-sm" name="shop-sizes"></span> <span class="d-inline-block text-black">Clear</span>
              </label>
              <label for="option-md" class="d-flex mr-3 mb-3">
                <span class="d-inline-block mr-2" style="top:-2px; position: relative;"><input type="radio" id="option-md" name="shop-sizes"></span> <span class="d-inline-block text-black">Leopard</span>
              </label>
            </div> #}
   <select>
            <option >Black Frame / Clear</option>
			<option >Silver Frame / Clear</option>
            </select>
            <div class="mb-5">
              <div class="input-group mb-3" style="max-width: 120px;">
              <div class="input-group-prepend">
                <button class="btn btn-outline-primary js-btn-minus" type="button">&minus;</button>
              </div>
              <input type="text" id="item_quantity" class="form-control text-center" value="1" placeholder="" aria-label="Example text with button addon" aria-describedby="button-addon1">
              <div class="input-group-append">
                <button class="btn btn-outline-primary js-btn-plus" type="button">&plus;</button>
              </div>
            </div>

            </div>
			
            <p>
              <button type="button" role="link" class="btn btn-sm btn-success"  data-toggle="modal" data-target="#tryItOnModal">Try it On</button>
              <a href="prescriptions.html" id="prescriptions-link" style="background-color:#6772E5;color:#FFF;padding:8px 12px;border:0;border-radius:4px;font-size:1em;margin-right:12px">
                  Choose Lens
              </a>
              <button style="border-color:#6772E5;color:#6772E5;padding:8px 12px;border-radius:4px;font-size:1em"
                  id="add-to-cart" onClick="addToCart()" role="link">
                  Add to Cart
              </button>
            </p>

            <h5>Notes</h5>
            <p id="item_shipping"></p>

            <div id="error-message"></div>

            <!-- Modal -->
            <div class="modal fade" id="tryItOnModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
              <div class="modal-dialog" role="document">
                <div class="modal-content">
                  <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Try Glasses On</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                      <span aria-hidden="true">&times;</span>
                    </button>
                  </div>
                  <div class="modal-body">
                    <center><canvas id="canvas" height=360 width=480></canvas></center>
                    <!-- <div style="display:none;"><img id="image" src="face1.jpg"></div> -->
                    <p>Click the button below to select a photo of your face</p>
                    <input type='file' onchange="readURL(this);" />
                  </div>
                  <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
                    {# <button type="button" class="btn btn-primary">Save changes</button> #}
                  </div>
                </div>
              </div>
            </div>

          </div>
        </div>
        
        
      </div>
    </div>

    <script>

      function getUrlVars() {
          var vars = {};
          var parts = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function(m,key,value) {
              vars[key] = value;
          });
          return vars;
      }

      var url_param = getUrlVars()['id'].replace('%20',' ').replace('#/','')

      console.log('url id',url_param)

      document.getElementById('prescriptions-link').href="prescriptions.html?id="+url_param

      var products = JSON.parse(localStorage.getItem('products'))
      console.log('stored products', products, Object.values(products))
      //console.log('current product', products[url_param])
      //console.log(Object.values(products).find(item=>item.id === url_param || item.id === url_param.toLowerCase()))
      var current_product = Object.values(products).find(item=>item.id.trim() === url_param || item.id.trim() === url_param.toLowerCase())
      
      console.log('current product', current_product)

      document.getElementById('item_id').innerHTML = current_product.id.replace(' ','-')
      document.getElementById('item_title').innerHTML = current_product.title
      document.getElementById('item_color').innerHTML = current_product.color
	  document.getElementById('item_quantity').innerHTML = current_product.quantity
      document.getElementById('item_category').innerHTML = current_product.category
      document.getElementById('item_shipping').innerHTML = current_product.shipping
      document.getElementById('item_price').innerHTML = current_product.price
      document.getElementById('item_currency').innerHTML = current_product.currency
      document.getElementById('item_image').src = current_product.photo
      document.getElementById('item_size').innerHTML = current_product.measurement

      /*
		download the face-detection cascade
	*/
	var facefinder_classify_region = function (r, c, s, pixels, ldim) { return -1.0; };
	var cascadeurl = 'https://raw.githubusercontent.com/nenadmarkus/pico/c2e81f9d23cc11d1a612fd21e4f9de0921a5d0d9/rnt/cascades/facefinder';
	fetch(cascadeurl).then(function (response) {
		response.arrayBuffer().then(function (buffer) {
			var bytes = new Int8Array(buffer);
			facefinder_classify_region = pico.unpack_cascade(bytes);
			console.log('* cascade loaded');
		})
	})
	/*
		prepare the image and canvas context
	*/
	var ctx = document.getElementById('canvas').getContext('2d');
	var img = document.getElementById('image');
	img.onload = () => ctx.drawImage(img, 0, 0);
	/*
		a function to transform an RGBA image to grayscale
	*/
	function rgba_to_grayscale(rgba, nrows, ncols) {
		var gray = new Uint8Array(nrows * ncols);
		for (var r = 0; r < nrows; ++r)
			for (var c = 0; c < ncols; ++c)
				// gray = 0.2*red + 0.7*green + 0.1*blue
				gray[r * ncols + c] = (2 * rgba[r * 4 * ncols + 4 * c + 0] + 7 * rgba[r * 4 * ncols + 4 * c + 1] + 1 * rgba[r * 4 * ncols + 4 * c + 2]) / 10;
		return gray;
	}

	function readURL(input) {
		if (input.files && input.files[0]) {
			var reader = new FileReader();

			reader.onload = function (e) {
				// document.getElementById('blah')
				// 	.attr('src', e.target.result);
				// document.getElementById('blah').src = e.target.result
				let glass_img = document.createElement("img");
				glass_img.src = e.target.result;
				glass_img.addEventListener("load", () => {
					// for (let x = 10; x < 200; x += 30) {
					//drawImage(image, dx, dy, dWidth, dHeight)
					// ctx.drawImage(glass_img, 0, 0, glass_img.width, glass_img.height);
					ctx.drawImage(glass_img, 0, 0, 284, 366);
					// }
					button_callback()
				})
			};

			reader.readAsDataURL(input.files[0]);
		}
	}
	/*
		this function is called each time you press the button to detect the faces
	*/
	function button_callback() {
		// re-draw the image to clear previous results and get its RGBA pixel data
		// ctx.drawImage(img, 0, 0);
		var rgba = ctx.getImageData(0, 0, 480, 360).data;
		// prepare input to `run_cascade`
		image = {
			"pixels": rgba_to_grayscale(rgba, 360, 480),
			"nrows": 360,
			"ncols": 480,
			"ldim": 480
		}
		params = {
			"shiftfactor": 0.1, // move the detection window by 10% of its size
			"minsize": 20,      // minimum size of a face (not suitable for real-time detection, set it to 100 in that case)
			"maxsize": 1000,    // maximum size of a face
			"scalefactor": 1.1  // for multiscale processing: resize the detection window by 10% when moving to the higher scale
		}
		// run the cascade over the image
		// dets is an array that contains (r, c, s, q) quadruplets
		// (representing row, column, scale and detection score)
		dets = pico.run_cascade(image, facefinder_classify_region, params);
		// cluster the obtained detections
		dets = pico.cluster_detections(dets, 0.2); // set IoU threshold to 0.2
		console.log(dets)
		// draw results
		qthresh = 5.0 // this constant is empirical: other cascades might require a different one
		// console.log('load glasses')
		// let glass_img = document.createElement("img");
		// glass_img.src = "glasses_1.png";
		// glass_img.addEventListener("load", () => {
		// 	// for (let x = 10; x < 200; x += 30) {
		// 	//drawImage(image, dx, dy, dWidth, dHeight)
		// 	ctx.drawImage(glass_img, 30, 80, 200, 100);
		// 	// }
		// });

		var x_coord = dets[0][1] - 70
		var y_coord = dets[0][0] - 40
		var width = dets[0][2] - 50
		var height = 50

		// ctx.beginPath();
		// ctx.rect(x_coord, y_coord, width, height)
		// ctx.lineWidth = 3;
		// ctx.strokeStyle = 'blue';
		// ctx.stroke();

		for (i = 0; i < dets.length; ++i) {
			// check the detection score
			// if it's above the threshold, draw it
			if (dets[i][3] > qthresh) {
				// ctx.beginPath();
				// // ctx.arc(dets[i][1], dets[i][0], dets[i][2] / 2, 0, 2 * Math.PI, false);
				// ctx.rect(dets[i][1] - 100, dets[i][0] - 50, dets[i][2], 100)
				// ctx.lineWidth = 3;
				// ctx.strokeStyle = 'blue';
				// ctx.stroke();



				var x_coord = dets[i][1] - 70
				var y_coord = dets[i][0] - 40
				var width = dets[i][2] - 30
				console.log(x_coord, y_coord)
				// let cx = document.querySelector("canvas").getContext("2d");
				let glass_img = document.createElement("img");
				//glass_img.src = "../assets/img/uploads/overlays/RLV00591.png";
				glass_img.src = ".."+current_product.photo.replace('uploads','uploads/overlays');
				glass_img.addEventListener("load", function () {

					// ctx.drawImage(glass_img, dets[i][1] - glass_img.width / 2, dets[i][0] - glass_img.height / 2, glass_img.width, glass_img.height);
					ctx.drawImage(glass_img, x_coord, y_coord, width, 60);

				});
			}
		}
	}

    </script>

{% endblock %}